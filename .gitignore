public class Solution{
public TreeNode sortedListToBST(ListNode head) {  
    // calculate list length  
    int len = 0; ListNode cur = head;  
    while (cur!=null) {  
     cur = cur.next;  
      len++;  
    }  
   // build the BST  
    return listToBST(head, 0, len-1);  
  }  
   
  private TreeNode listToBST(ListNode head, int low, int high) {  
    if (low > high) return null;  
    int mid = (low + high) / 2;  
    // find the middle listnode  
    ListNode midNode = head;  
    int cur = mid;  
    
    for(int i = low; i < mid; i++){
        midNode = midNode.next;
        
    }

   TreeNode root = new TreeNode(midNode.val);  
    root.left = listToBST(head, low, mid-1);  
    root.right = listToBST(midNode.next, mid+1, high);  
    return root;  
  }
}
